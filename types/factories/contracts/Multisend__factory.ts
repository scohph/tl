/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Multisend, MultisendInterface } from "../../contracts/Multisend";

const _abi = [
  {
    inputs: [],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "_token",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct Multisend.TransferItem[]",
        name: "_transfers",
        type: "tuple[]",
      },
    ],
    name: "batchTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b506103d08061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a8ad2e0614610030575b600080fd5b61004361003e36600461029d565b610045565b005b600081815b818110156100835784848281811061006457610064610327565b9050604002016020013583610079919061033d565b925060010161004a565b506040516370a0823160e01b815233600482015282906001600160a01b038716906370a0823190602401602060405180830381865afa1580156100ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ee9190610364565b101561010d57604051631e9acf1760e31b815260040160405180910390fd5b604051636eb1769f60e11b815233600482015230602482015282906001600160a01b0387169063dd62ed3e90604401602060405180830381865afa158015610159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017d9190610364565b101561019c576040516313be252b60e01b815260040160405180910390fd5b60005b8181101561027d57856001600160a01b03166323b872dd338787858181106101c9576101c9610327565b6101df926020604090920201908101915061037d565b8888868181106101f1576101f1610327565b6040805160e088901b6001600160e01b03191681526001600160a01b0396871660048201529490951660248501529093020160200135604482015260640190506020604051808303816000875af1158015610250573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027491906103a1565b5060010161019f565b505050505050565b6001600160a01b038116811461029a57600080fd5b50565b6000806000604084860312156102b257600080fd5b83356102bd81610285565b9250602084013567ffffffffffffffff8111156102d957600080fd5b8401601f810186136102ea57600080fd5b803567ffffffffffffffff81111561030157600080fd5b8660208260061b840101111561031657600080fd5b939660209190910195509293505050565b634e487b7160e01b600052603260045260246000fd5b8082018082111561035e57634e487b7160e01b600052601160045260246000fd5b92915050565b60006020828403121561037657600080fd5b5051919050565b60006020828403121561038f57600080fd5b813561039a81610285565b9392505050565b6000602082840312156103b357600080fd5b8151801515811461039a57600080fdfea164736f6c634300081b000a";

type MultisendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultisendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multisend__factory extends ContractFactory {
  constructor(...args: MultisendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multisend> {
    return super.deploy(overrides || {}) as Promise<Multisend>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multisend {
    return super.attach(address) as Multisend;
  }
  override connect(signer: Signer): Multisend__factory {
    return super.connect(signer) as Multisend__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultisendInterface {
    return new utils.Interface(_abi) as MultisendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multisend {
    return new Contract(address, _abi, signerOrProvider) as Multisend;
  }
}
